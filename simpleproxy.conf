# Simple nginx config demonstrating auth_request

# Django auth service
# https://github.com/cedadev/django-auth-service
upstream authservice {
    server 127.0.0.1:8080;
}

# Some application serving secured data
upstream dataserver {
    server 127.0.0.1:8000;
}

server {
    # Regular HTTP server on localhost
    server_name 0.0.0.0;
    listen 80;

    # Standard reverse proxy settings
    proxy_set_header  Host $http_host;
    proxy_set_header  X-Real-IP $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;

    # Path protected by the auth_request module
    # http://nginx.org/en/docs/http/ngx_http_auth_request_module.html#auth_request
    location /data {
        proxy_pass http://dataserver/data;
        auth_request /verify/;

        # Unauhenticated requests are redirected to the login endpoint
        error_page 401 = @error401;
    }

    # The auth service's verify endpoint controls access to a resource
    # by returning an appropriate HTTP status code:
    # 200 - authorized
    # 401 - restricted but request is not yet authenticated
    # 403 - unauthorized
    location /verify {
        proxy_pass http://authservice/verify;
        proxy_pass_request_body off;

        proxy_set_header Content-Length '0';
        proxy_set_header X-Origin-URI $request_uri;
    }

    # The auth service's login endpoint manages a browser authentication
    # flow with a configured OpenID Connect Identity Provider
    location /login {
        proxy_pass http://authservice/login;
        proxy_pass_request_body off;

        proxy_set_header Content-Length '0';
        proxy_set_header Host $host;
    }

    # This error section is used to build a login URL that will redirect
    # a user back to their original location once they are authenticated
    location @error401 {
        set $query '';
        if ($request_uri ~* "[^\?]+\?(.*)$") {
            set $query $1;
        }

        return 302 /login/?next=$scheme://$http_host$http_port$request_uri;
    }
}
